<vdb-contents>
    <vdb name="Portfolio" version="1">

        <description>The Portfolio Dynamic VDB</description>
 
        <!--
            Setting to use connector supplied metadata. Can be "true" or "cached".
            "true" will obtain metadata once for every launch of Teiid.
            "cached" will save a file containing the metadata into
            the deploy/<vdb name>/<vdb version/META-INF directory
        -->
        <property name="UseConnectorMetadata" value="true" />

        <!--
            Each model represents a access to one or more sources.
            The name of the model will be used as a top level schema name
            for all of the metadata imported from the connector.

            NOTE: Multiple models, with different import settings, can be bound to
            the same connector binding and will be treated as the same source at
            runtime.
        -->
        <model name="MarketData">
            <!--
                Each source represents a translator and data source. There are
                pre-defined translators, or you can create one.
            -->
            <source name="text-connector" translator-name="file" connection-jndi-name="java:/marketdata-file"/>
        </model>
 
        <model name="Accounts">
            <!--
                JDBC Import settings
                importer.useFullSchemaName directs the importer to drop the source
                schema from the Teiid object name, so that the Teiid fully qualified name
                will be in the form of <model name>.<table name>
            -->
            <property name="importer.useFullSchemaName" value="false"/>
 
            <!--
                This connector is defined to reference the H2 localDS"  
            --> 
            <source name="h2-connector" translator-name="h2" connection-jndi-name="java:/accounts-ds"/>
        </model>
 
        <model name="PersonalValuations">
            <property name="importer.headerRowNumber" value="1"/>
            <property name="importer.ExcelFileName" value="otherholdings.xls"/>
            <source name="excelconnector" translator-name="excel"  connection-jndi-name="java:/excel-file"/>
            <metadata type="DDL"><![CDATA[
 
                SET NAMESPACE 'http://www.teiid.org/translator/excel/2014' AS teiid_excel;
 
                CREATE FOREIGN TABLE Sheet1 (
                ROW_ID integer OPTIONS (SEARCHABLE 'All_Except_Like', "teiid_excel:CELL_NUMBER" 'ROW_ID'),
                ACCOUNT_ID integer OPTIONS (SEARCHABLE 'Unsearchable', "teiid_excel:CELL_NUMBER" '1'),
                PRODUCT_TYPE string OPTIONS (SEARCHABLE 'Unsearchable', "teiid_excel:CELL_NUMBER" '2'),
                PRODUCT_VALUE string OPTIONS (SEARCHABLE 'Unsearchable', "teiid_excel:CELL_NUMBER" '3'),
                CONSTRAINT PK0 PRIMARY KEY(ROW_ID)
                ) OPTIONS ("teiid_excel:FILE" 'otherholdings.xls', "teiid_excel:FIRST_DATA_ROW_NUMBER" '2');]]>
            </metadata>
        </model>

        <model name="Stocks" type="VIRTUAL">
            <metadata type="DDL"><![CDATA[
     
                CREATE VIEW StockPrices (symbol string, price bigdecimal)
                AS
                    SELECT SP.symbol, SP.price
                    FROM (EXEC MarketData.getTextFiles('*.txt')) AS f,
                    TEXTTABLE(f.file COLUMNS symbol string, price bigdecimal HEADER) AS SP;

                CREATE VIEW Stock (product_id integer, symbol string, price bigdecimal, company_name varchar(256))
                AS
                    SELECT  A.ID, S.symbol, S.price, A.COMPANY_NAME
                    FROM StockPrices AS S, Accounts.PRODUCT AS A
                    WHERE S.symbol = A.SYMBOL;]]>
            </metadata>
        </model>
 
        <model name="StocksMatModel" type="VIRTUAL">
            <metadata type="DDL"><![CDATA[
                CREATE view stockPricesMatView
                (
                    product_id integer,
                    symbol string,
                    price bigdecimal,
                    company_name   varchar(256)
                ) OPTIONS (MATERIALIZED 'TRUE', UPDATABLE 'TRUE',
                MATERIALIZED_TABLE 'Accounts.h2_stock_mat',
                "teiid_rel:MATVIEW_TTL" 120000,
                "teiid_rel:MATVIEW_BEFORE_LOAD_SCRIPT" 'execute accounts.native(''truncate table h2_stock_mat'');',
                "teiid_rel:MATVIEW_AFTER_LOAD_SCRIPT"  'execute accounts.native('''')',
                "teiid_rel:ON_VDB_DROP_SCRIPT" 'DELETE FROM Accounts.status WHERE Name=''stock'' AND schemaname = ''Stocks''',
                "teiid_rel:MATERIALIZED_STAGE_TABLE" 'Accounts.h2_stock_mat',
                "teiid_rel:ALLOW_MATVIEW_MANAGEMENT" 'true',
                "teiid_rel:MATVIEW_STATUS_TABLE" 'status',
                "teiid_rel:MATVIEW_SHARE_SCOPE" 'NONE',
                "teiid_rel:MATVIEW_ONERROR_ACTION" 'THROW_EXCEPTION')
                AS SELECT A.ID, S.symbol, S.price, A.COMPANY_NAME
                   FROM Stocks.StockPrices AS S, Accounts.PRODUCT AS A
                   WHERE S.symbol = A.SYMBOL;]]>
            </metadata>
        </model>
    </vdb>
    <vdb name="tweet-example" version="1">
        
        <description>Shows how to call Web Services</description>
        
        <property name="UseConnectorMetadata" value="cached" />
        
        <model name="twitter" type="PHYSICAL">
            <source name="twitter" translator-name="rest" connection-jndi-name="java:/twitterDS"/>
        </model>
        <model name="twitterview" type="VIRTUAL">
            <metadata type="DDL"><![CDATA[
                CREATE VIRTUAL PROCEDURE getTweets(IN query varchar) RETURNS TABLE (created_on varchar(25), from_user varchar(25), to_user varchar(25),
                profile_image_url varchar(25), source varchar(25), text varchar(140)) AS
                select tweet.* from
                (EXEC twitter.invokeHTTP(action => 'GET', endpoint => querystring('', query as q))) AS w,
                XMLTABLE('results' passing JSONTOXML('myxml', w.result) columns
                created_on string PATH 'created_at',
                from_user string PATH 'from_user',
                to_user string PATH 'to_user',
                profile_image_url string PATH 'profile_image_url',
                source string PATH 'source',
                text string PATH 'text') AS tweet;
                CREATE VIEW Tweet AS select * FROM twitterview.getTweets;
                ]]>
            </metadata>
        </model>
        
        <translator name="rest" type="ws" description="Rest Web Service translator">
            <property name="DefaultBinding" value="HTTP"/>
            <property name="DefaultServiceMode" value="MESSAGE"/>
        </translator>
    </vdb>
    <vdb name="MyPartsVDB_Dynamic" version="1">

        <connection-type>BY_VERSION</connection-type>

        <model name="PartsViewModel" type="VIRTUAL">
            <metadata type="DDL">
                <![CDATA[CREATE VIEW PartsSummary (
                PART_ID string(50) NOT NULL OPTIONS (SEARCHABLE 'Searchable'),
                PART_NAME string(255) OPTIONS (SEARCHABLE 'Searchable'),
                PART_COLOR string(30) OPTIONS (SEARCHABLE 'Searchable'),
                PART_WEIGHT string(255) OPTIONS (SEARCHABLE 'Searchable'),
                SUPPLIER_ID string(10) NOT NULL OPTIONS (SEARCHABLE 'Searchable'),
                QUANTITY bigdecimal(3) OPTIONS (FIXED_LENGTH TRUE, SEARCHABLE 'All_Except_Like'),
                SHIPPER_ID bigdecimal(2) OPTIONS (FIXED_LENGTH TRUE, SEARCHABLE 'All_Except_Like')
                ) OPTIONS (UPDATABLE TRUE)
                AS
                SELECT  PartsSS.PARTS.PART_ID, PartsSS.PARTS.PART_NAME, PartsSS.PARTS.PART_COLOR,
                        PartsSS.PARTS.PART_WEIGHT, PartsSS.SUPPLIER_PARTS.SUPPLIER_ID, PartsSS.SUPPLIER_PARTS.QUANTITY,
                        PartsSS.SUPPLIER_PARTS.SHIPPER_ID FROM PartsSS.PARTS,
                        PartsSS.SUPPLIER_PARTS WHERE PartsSS.PARTS.PART_ID = PartsSS.SUPPLIER_PARTS.PART_ID;]]>
            </metadata>
        </model>
        <model name="PartsSS" type="PHYSICAL">
            <source name="PartsSS" translator-name="sqlserver" connection-jndi-name="PartsSS"></source>
            <metadata type="DDL">
                <![CDATA[CREATE FOREIGN TABLE PARTS (
                PART_ID string(50) NOT NULL OPTIONS (NAMEINSOURCE '"PART_ID"',
                SEARCHABLE 'Searchable', NATIVE_TYPE 'varchar'),
                PART_NAME string(255) OPTIONS (NAMEINSOURCE '"PART_NAME"',
                SEARCHABLE 'Searchable', NATIVE_TYPE 'varchar'),
                PART_COLOR string(30) OPTIONS (NAMEINSOURCE '"PART_COLOR"',
                SEARCHABLE 'Searchable', NATIVE_TYPE 'varchar'),
                PART_WEIGHT string(255) OPTIONS (NAMEINSOURCE '"PART_WEIGHT"',
                SEARCHABLE 'Searchable', NATIVE_TYPE 'varchar')
                ) OPTIONS (NAMEINSOURCE '"partssupplier"."dbo"."PARTS"', UPDATABLE TRUE);
                
                CREATE FOREIGN TABLE SHIP_VIA (
                SHIPPER_ID bigdecimal(2) NOT NULL OPTIONS (NAMEINSOURCE '"SHIPPER_ID"', FIXED_LENGTH TRUE,
                SEARCHABLE 'All_Except_Like', NATIVE_TYPE 'numeric'),
                SHIPPER_NAME string(30) OPTIONS (NAMEINSOURCE '"SHIPPER_NAME"',
                SEARCHABLE 'Searchable', NATIVE_TYPE 'varchar')
                ) OPTIONS (NAMEINSOURCE '"partssupplier"."dbo"."SHIP_VIA"', UPDATABLE TRUE);
                
                CREATE FOREIGN TABLE STATUS (
                STATUS_ID bigdecimal(2) NOT NULL OPTIONS (NAMEINSOURCE '"STATUS_ID"', FIXED_LENGTH TRUE,
                SEARCHABLE 'All_Except_Like', NATIVE_TYPE 'numeric'),
                STATUS_NAME string(30) OPTIONS (NAMEINSOURCE '"STATUS_NAME"',
                SEARCHABLE 'Searchable', NATIVE_TYPE 'varchar')
                ) OPTIONS (NAMEINSOURCE '"partssupplier"."dbo"."STATUS"', UPDATABLE TRUE);
                
                CREATE FOREIGN TABLE SUPPLIER (
                SUPPLIER_ID string(10) NOT NULL OPTIONS (NAMEINSOURCE '"SUPPLIER_ID"',
                SEARCHABLE 'Searchable', NATIVE_TYPE 'varchar'),
                SUPPLIER_NAME string(30) OPTIONS (NAMEINSOURCE '"SUPPLIER_NAME"',
                SEARCHABLE 'Searchable', NATIVE_TYPE 'varchar'),
                SUPPLIER_STATUS bigdecimal(2) OPTIONS (NAMEINSOURCE '"SUPPLIER_STATUS"', FIXED_LENGTH TRUE,
                SEARCHABLE 'All_Except_Like', NATIVE_TYPE 'numeric'),
                SUPPLIER_CITY string(30) OPTIONS (NAMEINSOURCE '"SUPPLIER_CITY"',
                SEARCHABLE 'Searchable', NATIVE_TYPE 'varchar'),
                SUPPLIER_STATE string(2) OPTIONS (NAMEINSOURCE '"SUPPLIER_STATE"',
                SEARCHABLE 'Searchable', NATIVE_TYPE 'varchar')
                ) OPTIONS (NAMEINSOURCE '"partssupplier"."dbo"."SUPPLIER"', UPDATABLE TRUE);
                
                CREATE FOREIGN TABLE SUPPLIER_PARTS (
                SUPPLIER_ID string(10) NOT NULL OPTIONS (NAMEINSOURCE '"SUPPLIER_ID"',
                SEARCHABLE 'Searchable', NATIVE_TYPE 'varchar'),
                PART_ID string(50) NOT NULL OPTIONS (NAMEINSOURCE '"PART_ID"',
                SEARCHABLE 'Searchable', NATIVE_TYPE 'varchar'),
                QUANTITY bigdecimal(3) OPTIONS ( NAMEINSOURCE '"QUANTITY"', FIXED_LENGTH TRUE,
                SEARCHABLE 'All_Except_Like', NATIVE_TYPE 'numeric'),
                SHIPPER_ID bigdecimal(2) OPTIONS (NAMEINSOURCE '"SHIPPER_ID"', FIXED_LENGTH TRUE,
                SEARCHABLE 'All_Except_Like', NATIVE_TYPE 'numeric')
                ) OPTIONS (NAMEINSOURCE '"partssupplier"."dbo"."SUPPLIER_PARTS"', UPDATABLE TRUE);]]>
                
            </metadata>
        </model>
    </vdb>
</vdb-contents>